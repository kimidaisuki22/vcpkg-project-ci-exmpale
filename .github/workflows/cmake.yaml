name: Build
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  # CMAKE_GENERATOR: Ninja   #  Ninja is not exist on ci.
  SAY_HELLO_TO_NOT_USED: "Release"

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
    steps:
      - name: Set up env
        shell: bash
        run: |
           echo "CMAKE_TOOLCHAIN_FILE=$VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake" >> $GITHUB_ENV
           echo "VCPKG_ROOT=$VCPKG_INSTALLATION_ROOT" >> $GITHUB_ENV

      - name: Set up compiler env
        shell: bash
        run: |
           echo "CXX=${{ matrix.cpp_compiler }}" >> $GITHUB_ENV
           echo "CC=${{ matrix.c_compiler }}" >> $GITHUB_ENV
           echo "CMAKE_BUILD_TYPE=${{ matrix.build_type }}" >> $GITHUB_ENV

      - name: Set up CMAKE_GENERATOR
        if: ${{ runner.os != 'Windows' }}
        shell: bash
        run: |
           echo "CMAKE_GENERATOR=Ninja" >> $GITHUB_ENV



      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - uses: kimidaisuki22/action-install-ninja@v1
        if: ${{ runner.os != 'Windows' }}

      - name: Directly invoke `vcpkg install`
        run: |
            vcpkg install

      - name: Build project
        run: cmake -B build -S . && cmake --build build -j --config ${{ matrix.build_type }}

      - name: Package project
        run: |
            cd build && cpack

      - name: Upload package(Linux)
        if: ${{ runner.os == 'Linux' }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ github.event.repository.name }}-${{ matrix.os }}-${{ matrix.c_compiler }}-${{ github.sha }}.tar.gz
          path: build/*.tar.gz

      - name: Upload package(Windows)
        if: ${{ runner.os == 'Windows' }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ github.event.repository.name }}-${{ matrix.os }}-${{ matrix.c_compiler }}-${{ github.sha }}.exe
          path: build/*.exe